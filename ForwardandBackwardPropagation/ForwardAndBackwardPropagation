{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "4b38174a-cd19-46f4-8b21-a8eb6c3b9078",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 0, Loss: 1.7327077643460507\n",
      "Epoch 100, Loss: 1.2726368188690542\n",
      "Epoch 200, Loss: 1.0490090038823012\n",
      "Epoch 300, Loss: 0.9000604808770895\n",
      "Epoch 400, Loss: 0.7975914042135077\n",
      "Epoch 500, Loss: 0.7271630352953821\n",
      "Epoch 600, Loss: 0.6776721689673834\n",
      "Epoch 700, Loss: 0.6426471021465995\n",
      "Epoch 800, Loss: 0.6173024723678147\n",
      "Epoch 900, Loss: 0.5984230763608189\n",
      "Test Doğruluğu: 0.7344\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAjcAAAHHCAYAAABDUnkqAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjEsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvc2/+5QAAAAlwSFlzAAAPYQAAD2EBqD+naQAASLJJREFUeJzt3Qd4VFXex/F/ei+kQiAEQu+9gw0UAVFQV31BQawIKooVC6y7Kq69gw3UFURlBVxBEJEiSpXeWyAhlRDSezLvc07IbAIhhjDJnfL9PM917ty5MzlzMTO/nOpkMplMAgAAYCecjS4AAACAJRFuAACAXSHcAAAAu0K4AQAAdoVwAwAA7ArhBgAA2BXCDQAAsCuEGwAAYFcINwAAwK4QbgDgHJ9//rk4OTnJ1q1b6+XnhYeHy6+//iqFhYXyyy+/6PsX44orrtBbbd7j8ePHL7K0gPUj3ABWrr6/aOvzPV1o27hxo9iyv//979W+v6SkpErnP/jggzJ48GDx8PCQq6++Wt8HUHuul/BcALgk//jHP6R58+bnHW/ZsqXYg1mzZomvr+95xwMDAyvdf/7552XUqFFy6NAhadWqlXTu3Pmifs7PP/980WW744475LbbbtOBCrA3hBsAhhk2bJj07NlT7NXNN98sISEhNTq3U6dOersYubm54u3tLe7u7hddNhcXF70B9ohmKcBObN++XYcFf39/XVugmjnObd4pKiqSF154QdcOeHp6SnBwsAwcOFBWrlxpPkc1mUyYMEGaNGmi/6pv1KiR3HDDDYb0zVA/UzXjvP766/LWW29JVFSUeHl5yeWXXy579uw573zVb2XQoEHi4+Oja0dUuffv33/eefHx8XL33XdLRESEfo+q9uiBBx7QfV4qKigokKlTp0poaKh+zdGjR8upU6cs+h5PnDgh119/vX79sLAwefTRR2XFihX6fa9Zs8Z8nupT07FjR/nzzz/lsssu06HmmWeeuWCfm/fee086dOigz2vQoIEOkfPnzzc/Tp8b2DNqbgA7sHfvXv2lroLNk08+KW5ubvLRRx/pL7y1a9dKnz59zH1BZs6cKffcc4/07t1bMjMzdV+ebdu26b4eyk033aRf76GHHpJmzZpJSkqKDj+xsbH6viVlZGRIampqpWPqC1eFroq+/PJLycrKksmTJ0t+fr688847ctVVV8nu3bvNnW9VR1wV7qKjo/X7zMvL01/wAwYM0O+vvOwJCQn6vaenp8t9990nbdu21WFn4cKFuiakYi2IugYqGMyYMUOHgLffflv3h/nmm29q9P7S0tLOO+bq6mpulsrJydHvIzExUaZMmSINGzbUAWT16tVVvt7p06f1e1TNSbfffvsFOx5/8skn8vDDD+uaI/W66prt2rVLNm3aJGPGjKlR2QGbZgJg1ebOnWtSv6pbtmy54DmjRo0yubu7m44ePWo+lpCQYPLz8zNddtll5mNdunQxjRgx4oKvc+bMGf2zXnvtNVN9vKeqNg8PD/N5MTEx+piXl5fp5MmT5uObNm3Sxx999FHzsa5du5rCwsJMp0+fNh/buXOnydnZ2TRu3DjzMbWvjlV1PUtLSyuVb8iQIeZjivp5Li4upvT09Grf34wZMy74/tq0aWM+74033tDHFi9ebD6Wl5dnatu2rT6+evVq8/HLL79cH5s9e/Z5P089prZyN9xwg6lDhw7VlrH8PaprDNgbam4AG1dSUqI7lKoOqarWopxqTlJ/pau/4lUNjarVUTUGqlbm8OHDumnqXKrJR9VcqOYQ1Wyjai3q0gcffCCtW7eudKyqfiDqvTVu3Nh8X9W8qNqoZcuWyZtvvqlrPnbs2KFrrYKCgsznqY65qkZKnaeUlpbK4sWLZeTIkVX29VG1RhWpmp2Kx1TtmGoeU01JNen0+5///Edf94pU81O55cuX6/elmqXKqebCe++9Vx577LHzXk81oakmw7+i/p1PnjwpW7ZskV69ev3l+YC9IdwANk71AVHNKW3atDnvsXbt2ukv9Li4ON3/Qo1OUv1QVKBQ/TeuvfZaPWqm/ItafXn+61//0l+sqsmjb9++ct1118m4ceN0k8mFqCYg1cRUUXXnVwwpNelQXFUQU+/h22+/1fsqbCgXugaqD4tqAsrOztZBT733mmjatGml++Vh78yZMzV6vuobU12HYlXuFi1anBeqLjRaTAWhmnQefuqpp3Qznbq+6rWuueYaHXRVEx3gCOhQDDgQ9WV79OhRmTNnjv6C//TTT6V79+76ttwjjzyihySrvjmqFkENU1YBQXVYvhDVB0XVFFXc7MGFRhOZTKpFp/6pmrWaUP9eBw8elAULFugO46oGSd2qvkOAIyDcADZOjeRRI2LUl9m5Dhw4IM7OzhIZGWk+ppptVNPG119/rWt0VK2N6oBbkapNULU3qrlLjUpSo4jeeOONC5Zh6NChutNxxc2SVDPauVQAK+8krEZRKRe6Bqr2RDUHqWulmomqGmllBFVuFTbPDUtHjhy55NdW7/fWW2+VuXPn6s7gI0aMkJdeekl3LgbsHeEGsIPaBdXssGTJkkrDepOTk/XIG/UXe3m/DzXapiI1ZFw1W6ghz4pq3jr3y08FHT8/P/M5VVE1NUOGDKm0WZLqJ6NGNJXbvHmzHvmjRg6V//yuXbvKF198oUdBlVMhRgW04cOH6/sq6Kn+O//973+rnPG5vmtkVChU7+vHH380H1PX+bPPPruk1z3331k1ZbVv316/PzUdAGDv6HMD2AjVlKQ6oJ5LDfV98cUXdW2JCjKTJk3Sw43VUHD1Rfnqq6+az1VfcGp4eI8ePXQNjvqCV0Ogy6f7V7Uhan6cW265RZ+rXmfRokU6KKnhx5b2008/6ZqVc/Xv379S52gVwNR7U3PRqPekhmSr4eKqA3G51157TYedfv366c7Q5UPBAwICKtVMvfzyyzrwqLlyVIdh1YSjOiR/9913sn79+vNmD74U6tpWNUOx6uSs+jTdf//98v777+trq+bTUSHtq6++0tddObcvTk2psKv6PKk+NurnqLl+1M9RtTcqqAJ2z+jhWgBqP2xabXFxcfq8bdu2mYYOHWry9fU1eXt7m6688krTH3/8Uem1XnzxRVPv3r1NgYGBeni1GnL80ksvmQoLC/XjqamppsmTJ+vjPj4+poCAAFOfPn1M3377bb2+J/V4xaHgami6GjYdGRmph4oPGjRID/M+1y+//GIaMGCAfm/+/v6mkSNHmvbt23feeSdOnNBDwkNDQ/XrRUdH6/ddUFBQqXznDhdXQ7PPHaJ9sUPBz33+sWPH9PB8VeaQkBDTlClTTAsXLtTnbdy40XyeGup9oeHd5w4F/+ijj/QUAMHBwfr9tWjRwvTEE0+YMjIyzvs3YCg47JGT+o/RAQsAqqKa2dTswapW5vHHHxdHoSYpVB271XDuikPgAdQMfW4AwECq+awi1edp9uzZevg7wQaoHfrcAICBbrzxRj2fjuoQreYKUn1uVD+kefPmGV00wGYRbgDAQGrElJpnSIUZNdu06sit5qdRw7gB1A59bgAAgF2hzw0AALArhBsAAGBXHK7PjVpEMCEhQU9kVdsJsgAAQP1SvWiysrIkIiJCzzZeHYcLNyrYVFxnBwAA2A61Jl6TJk2qPcfhwk351OPq4pSvtwMAAKxbZmamrpyoyRIiDhduypuiVLAh3AAAYFtq0qWEDsUAAMCuEG4AAIBdIdwAAAC7QrgBAAB2hXADAADsCuEGAADYFcINAACwK4QbAABgVwg3AADArhBuAACAXSHcAAAAu0K4AQAAdoVwY0GZ+UWyLyHT6GIAAODQCDcWsj8xUzr//WcZ++lGMZlMRhcHAACHRbixkOhQH3FzcZIzuUVy8kye0cUBAMBhEW4sxMPVRdo29Nf7u+MzjC4OAAAOi3BjQZ2aBOhbwg0AAMYh3FhQp8Znw81Jwg0AAEYh3NRFuInPoFMxAAAGIdxYUOtwP3F3cZaMvCKJS6NTMQAARiDcWJC7q7O0a+Sn93fFpxtdHAAAHBLhpq46FdPvBgAAQxBu6rDfDQAAqH+EGwvr1DjQHG5KS+lUDABAfSPcWFircF/d9yYrv1hOpOUaXRwAABwO4cbC3FycpX0jZioGAMAohJs60NncqZgRUwAA1DfCTR12Kt4ZR80NAAD1jXBTB7o1DTTPdVNUUmp0cQAAcCiEmzoQHeIr/p6ukl9UKgeTsowuDgAADoVwUwecnZ2ka9MGen977BmjiwMAgEMh3NSRbpFlTVPbY+lUDABAfSLc1HG/m+1xhBsAAOoT4aaOdD1bcxOTmiNpOYVGFwcAAIdBuKkjgd7uEh3qo/d3xNHvBgCA+kK4qUPdzZ2KaZoCAKC+EG7qo98N4QYAgHpDuKlD3SLLam52xKVLCSuEAwBQLwg3dah1uK94u7tIdkGxHD2VbXRxAABwCISbOuTq4mxeRPPPE3QqBgCgPhBu6ljPqCB9uyUmzeiiAADgEAg3dax387Jws/k44QYAgPpAuKlj3aMaiLOTyMkzeZKYkWd0cQAAsHuEmzrm6+EqHSLK+t1spmkKAIA6R7ipz6Ypwg0AAHWOcFMPejU726mYfjcAANQ5wk096NWsbDK/Q8nZcoZFNAEAqFOEm3oQ7OshLcN89T61NwAA2HG4WbdunYwcOVIiIiLEyclJFi9e/JfPKSgokGeffVaioqLEw8NDmjVrJnPmzBFrR9MUAAD1w1UMlJOTI126dJG77rpLbrzxxho955ZbbpHk5GT57LPPpGXLlpKYmCilpaVi7fo0D5KvN8fK5uPMVAwAgN2Gm2HDhumtppYvXy5r166VY8eOSVBQWU2IqrmxBb3OjpjaE58hOQXF4uNh6KUHAMBu2VSfmx9++EF69uwpr776qjRu3Fhat24tjz/+uOTlWf/keI0DvaRJAy+9OjhNUwAA1B2bqj5QNTbr168XT09PWbRokaSmpsqkSZPk9OnTMnfu3Av20VFbuczMTDFK/xbB8u3Wk/LH0dNyRZsww8oBAIA9s6maG9W3RnU8njdvnvTu3VuGDx8ub775pnzxxRcXrL2ZOXOmBAQEmLfIyEgxyoCWIfr29yOphpUBAAB7Z1PhplGjRro5SoWUcu3atROTySQnT56s8jnTpk2TjIwM8xYXFydG6dciWN/uS8xkvhsAAOqITYWbAQMGSEJCgmRnZ5uPHTp0SJydnaVJkyZVPkcNF/f396+0GSXMz1Nah/uKySSy8dhpw8oBAIA9MzTcqJCyY8cOvSkxMTF6PzY21lzrMm7cOPP5Y8aMkeDgYJkwYYLs27dPz5PzxBNP6KHkXl5eYgv6tzjbNHWUpikAAOwu3GzdulW6deumN2Xq1Kl6f/r06fq+msOmPOgovr6+snLlSklPT9ejpsaOHasnAXz33XfFVqhOxcofR6i5AQCgLjiZVIcVB6JGS6k+O6r/jRFNVBl5RdLtHz9LqUlkw7SrpFGAbdQ4AQBgK9/fNtXnxh4EeLlJpyaBep/aGwAALI9wY4ABZ5um6HcDAIDlEW4MnO9m/eFUPYwdAABYDuHGAD2bNRAvNxdJySqQA0lZRhcHAAC7QrgxgIeri3nU1JqDp4wuDgAAdoVwY5DL24Tq27WHUowuCgAAdoVwY5DLW5eFm63Hz0hWfpHRxQEAwG4QbgwSFewjzYK9pbjUpFcJBwAAlkG4MdAVbcL07dpD9LsBAMBSCDdW0DS19uAphoQDAGAhhBsD9Y0OFndXZ4lPz5Ojp/630jkAAKg9wo2BvNxdpE/zIL2/+gBNUwAAWALhxmBXnu1388v+ZKOLAgCAXSDcGOzq9uH6duuJM3Imp9Do4gAAYPMINwaLDPKWtg39pKTUJKsPMqEfAACXinBjRbU3K/fRNAUAwKUi3FiBIe3CzfPd5BeVGF0cAABsGuHGCnRqHCDh/h6SW1giG44xWzEAAJeCcGMFnJ2dzLU3NE0BAHBpCDdWYsjZfjer9idLaSmzFQMAUFuEGyvRv0Ww+Li7SHJmgeyOzzC6OAAA2CzCjZXwcHWRy9uUrTVF0xQAALVHuLHCIeHL9yYZXRQAAGwW4caKDG4XLu4uznIkJVsOJWcZXRwAAGwS4caK+Hu6yWWtQ/T+j7sSjS4OAAA2iXBjZYZ3aqRvl+0m3AAAUBuEGyscEk7TFAAAtUe4sTI0TQEAcGkIN1aIpikAAGqPcGOFaJoCAKD2CDdWiKYpAABqj3Bj5U1TS3cliMnEWlMAANQU4caKZyv2cHWWo6dyZG9CptHFAQDAZhBurJSfp5t5OYbvt8UbXRwAAGwG4caKje7WWN/+sDNBiktKjS4OAAA2gXBjxS5rHSoNvN0kNbtAfj962ujiAABgEwg3VszNxVlGdonQ+4u30zQFAEBNEG6s3KizTVPL9yRJTkGx0cUBAMDqEW6sXLfIQIkK9pa8ohJZuS/Z6OIAAGD1CDdWzsnJSUZ1Lau9WUTTFAAAf4lwY0NNU78dPiXJmflGFwcAAKtGuLEBzUN8pGdUAyk1ifxn20mjiwMAgFUj3NiIW3pG6tvvtp5kOQYAAKpBuLERIzo3Em93F4lJzZGtJ84YXRwAAKwW4cZG+Hi4ynWdyxbT/GZLnNHFAQDAahFubMitvcqappbuSpRs5rwBAKBKhBsb0r1pA4kO9dFz3izdlWB0cQAAsEqEGxub8+bWsx2LaZoCAMAKw826detk5MiREhERob+4Fy9eXOPn/v777+Lq6ipdu3YVRzK6e2NxcXaSbbHpcig5y+jiAABgdQwNNzk5OdKlSxf54IMPLup56enpMm7cOBk8eLA4mjA/TxnSLkzvz9t4wujiAABgdQwNN8OGDZMXX3xRRo8efVHPmzhxoowZM0b69esnjuj2vlH69vtt8SymCQCArfe5mTt3rhw7dkxmzJhRo/MLCgokMzOz0mbrBrQIkWbB3pJVUCxLdtCxGAAAmw03hw8flqefflq++uor3d+mJmbOnCkBAQHmLTKyrEOuLXN2djLX3ny18QQzFgMAYIvhpqSkRDdFvfDCC9K6desaP2/atGmSkZFh3uLi7GOU0c09moiHq7PsS8yU7XHpRhcHAACrUbPqDyuQlZUlW7dule3bt8uDDz6oj5WWlupaC1WL8/PPP8tVV1113vM8PDz0Zm8Cvd3lus4ReiFNVXuj5sABAAA2VHPj7+8vu3fvlh07dpg31bG4TZs2er9Pnz7iaG7v21Tf/rgrUc7kFBpdHAAArIKhNTfZ2dly5MgR8/2YmBgdVIKCgqRp06a6SSk+Pl6+/PJLcXZ2lo4dO1Z6flhYmHh6ep533FF0jQyUjo39ZU98pnz3Z5zcd1kLo4sEAIBj19yoZqZu3brpTZk6darenz59ur6fmJgosbGxRhbRqqmJD2/vU9ax+N8bT0hJKR2LAQBwMjnYUBs1FFyNmlKdi1VTl63LKyyRfq+skvTcIvnojh4ytENDo4sEAICh39820+cGVfNyd5Exvcv63ny2Psbo4gAAYDjCjR24o1+UuDo7yeaYNNkTn2F0cQAAMBThxg40CvCS4Z0a6f05v1N7AwBwbIQbO3HXwOb69r87EyQlM9/o4gAAYBjCjR0NC+8R1UCKSkx6Uj8AABwV4caO3DWgrPbmq02xkl9UYnRxAAAwBOHGjgztEC6NA70kLadQluyIN7o4AAAYgnBjR1xdnGV8/yjzsPBSJvUDADggwo2dubVXU/H1cJVDydmy+mCK0cUBAKDeEW7sTICXm4w9u6DmrDVHjS4OAAD1jnBjh+4e0FzcXZxl64kzemI/AAAcCeHGDoX5e8pNPZro/Vlr/rfqOgAAjoBwY6fuvyxanJ1EVh88JfsTM40uDgAA9YZwY6eahfjIsLNLMsxeS98bAIDjINzYsQcub2FekiH2dK7RxQEAoF4QbuxYx8YBclnrUFHT3Xz8G7U3AADHQLhxkNqbb7eelKQMFtQEANg/wo2d6xsdJL2aNZDC4lL63gAAHALhxs45OTnJI0Na6/35m2OpvQEA2D3CjQPo3yKY2hsAgMMg3DgAam8AAI6EcONAtTe9mwVRewMAsHuEG4eqvWml96m9AQDYM8KNA+lH7Q0AwAEQbhy19mZTrJw8w6zFAAD7Q7hxwNqbftHBUlhSKu/8ctjo4gAAYHGEGwesvXny2jZ6/z/bTsrh5CyjiwQAgEURbhxQt6YNZGiHcL3m1GsrDhpdHAAALIpw46CeGNpGnJ1Eft6XLNtizxhdHAAALIZw46BahvnJzT2a6P1//XRATCaT0UUCAMAiCDcObMqQ1uLu6iybYtJk3eFUo4sDAIBFEG4cWONALxnXN8pce1OqOuEAAGDjCDcObtKVLcXPw1X2JWbKou3xRhcHAIBLRrhxcEE+7jL5qpZ6X42cyi0sNrpIAABcEsIN5M7+zaRJAy9JysyXT9bFGF0cAAAuCeEG4unmIk8Pa6v31ZpTyZksqgkAsF2EG2gjOjWS7k0DJa+ohIn9AAA2jXAD87IMz13X3rwsw574DKOLBABArRBuYNa9aQO5vkuEqPn8Xly6j4n9AAA2iXCDStSimh6uzrLxWJpemgEAAFtDuEElTRp4yz2Dmut9VXuTX1RidJEAALgohBucZ9IVLaVRgKfEpeXp0VMAANgSwg3O4+PhKs+OaKf3Z605KnFpuUYXCQCAGiPc4IJDw/u3CJaC4lL5x4/7jC4OAAA1RrjBBYeGv3B9B3F1dpKV+5Jl9cEUo4sEAECNEG5wQa3C/fTSDMoLP+yVgmI6FwMArB/hBtWaMqSVhPp5yPHTufLpb6w7BQCwfoaGm3Xr1snIkSMlIiJCN4MsXry42vO///57ufrqqyU0NFT8/f2lX79+smLFinorryPy83STZ4aXrTv1/q9HJCE9z+giAQBgveEmJydHunTpIh988EGNw5AKN8uWLZM///xTrrzySh2Otm/fXudldWSjujaWXs0a6HWn/v7DXqOLAwBAtZxMVjLHvqq5WbRokYwaNeqintehQwe59dZbZfr06TU6PzMzUwICAiQjI0PX/qBmDiRlynXvrpfiUpPMvr2HXNuxodFFAgA4kMyL+P626T43paWlkpWVJUFBQUYXxe61begv910WrfdV7U1WfpHRRQIAwP7Czeuvvy7Z2dlyyy23XPCcgoICnfYqbqidhwe3kqhgb0nKzJfXVxw0ujgAAFgu3MTFxcnJkyfN9zdv3iyPPPKIfPzxx1Jf5s+fLy+88IJ8++23EhYWdsHzZs6cqauxyrfIyMh6K6O98XRzkZdHd9L7X248IdtizxhdJAAALBNuxowZI6tXr9b7SUlJupOvCjjPPvus/OMf/5C6tmDBArnnnnt0sBkyZEi1506bNk23z5VvKpih9ga0DJEbuzcW1VNr2n92S1FJqdFFAgDg0sPNnj17pHfv3npfBYyOHTvKH3/8IfPmzZPPP/9c6tLXX38tEyZM0LcjRoz4y/M9PDx0x6OKGy7NcyPaSwNvNzmYnCWf/HbM6OIAAHDp4aaoqEiHBuWXX36R66+/Xu+3bdtWEhMTa/w6qr/Mjh079KbExMTo/djYWHOty7hx4yo1Ran7b7zxhvTp00fXGqlN1cig/gT5uMvz17XX++/8cliOp+YYXSQAAC4t3Kjh17Nnz5bffvtNVq5cKddee60+npCQIMHBwTV+na1bt0q3bt30pkydOlXvlw/rVkGpPOgoqk9PcXGxTJ48WRo1amTepkyZUpu3gUswultjGdgyRC+s+eR/dklpqVXMKAAAQO3muVmzZo2MHj1ajzwaP368zJkzRx9/5pln5MCBA3omYWvFPDeWE5eWK0PfXie5hSXy95Ht5c4BzY0uEgDATl3M93etJ/ErKSnRP6hBgwbmY8ePHxdvb+9qRy8ZjXBjWf/ecFyeX7JXvNxcZPkjgyQq2MfoIgEA7FCdT+KXl5en548pDzYnTpyQt99+Ww4ePGjVwQaWN7ZPlPSNDtJLMzyxkOYpAIDxahVubrjhBvnyyy/1fnp6uu7cqzr5qqUTZs2aZekywoo5OzvJazd3EW93F9kckyZfbjhudJEAAA6uVuFm27ZtMmjQIL2/cOFCCQ8P17U3KvC8++67li4jrFxkkLdMG1a2cvi/lh+UE6cZPQUAsLFwk5ubK35+fnr/559/lhtvvFGcnZ2lb9++OuTA8ZzbPFVC8xQAwJbCTcuWLWXx4sV6tt8VK1bINddco4+npKTQSddBnds89SmT+wEAbCncqHloHn/8cWnWrJmeqbhfv37mWpzyOWvgmM1TM0aWTe73+s8HZW8CkysCAOpfrYeCq5mB1SR7Xbp00U1SilpfStXcqJmKrRVDweuW+t/p/n//KT/vS5ZWYb7y34cG6gU3AQCw6qHgSsOGDXUtjZqVuHyFcFWLY83BBnXPyclJXrmps4T6ecjhlGx55acDRhcJAOBgahVuSktL9erfKkFFRUXpLTAwUP75z3/qx+DY1NpTr93cWe9//sdxWXvolNFFAgA4kFqFm2effVbef/99eeWVV2T79u16e/nll+W9996T559/3vKlhM25ok2Y3Nm/md5//LudkpZTaHSRAAAOolZ9biIiIvTCmeWrgZdbsmSJTJo0SeLj48Va0eem/uQXlch1762XIynZcm2HhjLr9u662QoAAKvrc5OWllZl3xp1TD0GKKoj8du3dhU3FydZvjdJFmyJM7pIAAAHUKtwo0ZIqWapc6ljnTuX9bUAlI6NA+Txa9ro/b//sFcOJmUZXSQAgJ1zrc2TXn31VRkxYoT88ssv5jluNmzYoCf1W7ZsmaXLCBt376Bo+ePoad2xePL8bfLDgwPE271W/+sBAFA3NTeXX365HDp0SEaPHq0XzlSbWoJh79698u9//7s2Lwk7n734zVu6SLi/h+5/M2PJXqOLBACwY7WexK8qO3fulO7du0tJSYlYKzoUG2fjsdMy5pONopadUmHnxu5NjC4SAMBG1MskfsDF6hsdLI8Maa33n1u8R9fiAABgaYQb1KvJV7aU/i2CJbewRB6cv00PFwcAwJIIN6hXLs5Oenh4iK+7HEjKkhf+u8/oIgEA7MxFDVlRnYarozoWA38lzN9T3rq1q4ybs1m+3hwr3ZsGyt96RhpdLACAI4Yb1ZHnrx4fN27cpZYJDmBQq1B5ZHBreeuXQ7r/TbtG/npOHAAArGq0lC1gtJT1KC01yd1fbJHVB09JZJCX/PfBgRLo7W50sQAAVojRUrCZ+W/evrWbNA3ylri0PHnkmx068AAAcCkINzBUgLebXlDTw9VZ1hw8Je/+etjoIgEAbBzhBobrEBEgL4/upPffWXVYVh9IMbpIAAAbRriBVbipRxO5vW9TUT3ApizYLidO5xhdJACAjSLcwGo8f1176RoZKJn5xXLPF1slK7/I6CIBAGwQ4QZWw8PVRT66o4deYPNwSrY8smCHlNDBGABwkQg3sCrh/p7y8R09xd3VWVYdSJHXfz5odJEAADaGcAOr0yUyUF67ubPen7XmqCzeHm90kQAANoRwA6t0Q9fG8sAVLfT+k//ZJTvjWNoDAFAzhBtYrcevaSOD24ZJYXGp3PvlVknOzDe6SAAAG0C4gXWvIH5bV2kV5ispWQVy35dbJa+wxOhiAQCsHOEGVs3P000+Hd9TAr3dZOfJDJn6LUs0AACqR7iB1YsK9pGPbu8h7i7O8tOeJPnX8gNGFwkAYMUIN7AJfaKD5dWzI6g+WndM5m06YXSRAABWinADmzGqW2N5dEhrvT99yV5Zc5A1qAAA5yPcwKY8PLil3NS9iZ65+MH522V/YqbRRQIAWBnCDWyKk5OTzLyxk/SNDpLsgmK56/MtDBEHAFRCuIHNUUszfHR7T2kR6iOJGfk64OQUFBtdLACAlSDcwCYFeLvJ3Dt7S7CPu+xNyJSJX/2pJ/sDAIBwA5vVNNhbPruzl3i5uchvh1PlyYU7mQMHAEC4gW3rGhkos27vLq7OTrJ4R4K8tGy/mEwEHABwZIQb2Lwr2oTJa38rmwPns/Uxeh4cAIDjItzALozu1kSeG9FO77/y0wH5bmuc0UUCABiEcAO7cc+gaLn/smi9//T3u+XXA8lGFwkAYADCDezKU9e2lRu7N9aT/E2at022HE8zukgAAEcKN+vWrZORI0dKRESEnpxt8eLFf/mcNWvWSPfu3cXDw0Natmwpn3/+eb2UFbbB2dlJ/nVTZ7myTajkF5XKhLlbZNfJdKOLBQBwlHCTk5MjXbp0kQ8++KBG58fExMiIESPkyiuvlB07dsgjjzwi99xzj6xYsaLOywrb4ebiLB+O7SF9mpfNYjxuzmY5kMQyDQDgKJxMVjJuVtXcLFq0SEaNGnXBc5566ilZunSp7Nmzx3zstttuk/T0dFm+fHmNfk5mZqYEBARIRkaG+Pv7W6TssE4q2Nzx2SbZHpsuIb7u8s39/aRFqK/RxQIA1MLFfH/bVJ+bDRs2yJAhQyodGzp0qD5+IQUFBfqCVNzgGHw9XOXzO3tL+0b+kppdKGM/2SRxablGFwsAUMdsKtwkJSVJeHh4pWPqvgoseXl5VT5n5syZOumVb5GRkfVUWljLMg3/vru3tAzzlaTMfBnz6UZJymChTQCwZzYVbmpj2rRpugqrfIuLY/4TRxPs6yHz7ukjUcHeEpeWpwNOShYBBwDslU2Fm4YNG0pycuW5S9R91fbm5eVV5XPUqCr1eMUNjifc31MHnIgATzl2Kkf+7+ONkpJJwAEAe2RT4aZfv36yatWqSsdWrlypjwN/pUkDb/n6vr464Bw9lSO3fULAAQB7ZGi4yc7O1kO61VY+1Fvtx8bGmpuUxo0bZz5/4sSJcuzYMXnyySflwIED8uGHH8q3334rjz76qGHvAbYlKthHFtzXz1yDQ8ABAPtjaLjZunWrdOvWTW/K1KlT9f706dP1/cTERHPQUZo3b66HgqvaGjU/zhtvvCGffvqpHjEF1FTTYG8dcBoHepUFnI83SjIBBwDshtXMc1NfmOcG5dSwcBVs4tPzJDrERzdZqb45AADrY7fz3ACWFBmkanD6ltXgpJbV4DBMHABsH+EGDq1iwIlJzZH/+2SjJGZUPWcSAMA2EG7g8MoDTpMGZQHn5lkb5HhqjtHFAgDUEuEGOBtw1NpTzUN8dB+cv320QQ4mZRldLABALRBugLNU09S39/eTtg395FRWgdz68QbZGZdudLEAABeJcANUEOrnoZuoukYGSnpukYz9dJNsOnba6GIBAC4C4QY4R6C3u3x1Tx/pFx0s2QXFMm7OZll9IMXoYgEAaohwA1TB18NV5k7oJYPbhklBcanc++VWWbw93uhiAQBqgHADXICnm4vMvqOHXN8lQopLTfLINzvko7VHxcHmvQQAm0O4Aarh5uIsb9/aVe4e2Fzfn/nTAfnHj/uktJSAAwDWinAD/AVnZyd5/rr28uzwdvr+3N+Py0MLtktBcYnRRQMAVIFwA9TQvZdF61ocNxcnWborUcbP2SwZeUVGFwsAcA7CDXARRnVrLHPv7K07HG88lia3zN6gJ/0DAFgPwg1wkQa2CpFv7u+r58Q5mJwlN7z/u+xgsj8AsBqEG6AWOkQEyKJJ/fVsxqnZBXLrRxt0UxUAwHiEG6CWmjTwloUP9Jerzs6FM3n+Nnn/18MMFQcAgxFugEug+t58Mq6n3DWgbKj46z8fkse+28lIKgAwEOEGuEQuzk4yfWR7eXFUR73//bZ4uePTzXI6u8DoogGAQyLcABZye98omXtnL/HzcJXNx9Pk+vd/lz3xGUYXCwAcDuEGsKDLWofKosn9pXmIjx4iftOsP1iTCgDqGeEGsLCWYX6yePIAubJNqO5orNak+ueP+6S4pNToogGAQyDcAHUgwMtNPhvfSx66qqW+/9n6GBk3Z7Ok5RQaXTQAsHuEG6AO16R67Jo2Mvv27uLt7iJ/HD0tI99bL3sT6IcDAHWJcAPUsWs7NtLNVM2Cvc39cBZtP2l0sQDAbhFugHrQOtxPlkweKFe0CZX8olJ59JudMu373ZJfxHw4AGBphBugngR4l/XDmTK4lTg5iXy9OVbX4pw4nWN00QDArhBugHqkJvl79OrW8sWE3hLk4y57EzLluvfWy4q9SUYXDQDsBuEGMGg+nKUPD5QeUQ0kK79Y7v/3n/LS0n1SxHBxALhkhBvAII0CvGTBfX3l3kFl61J98luM/N/HGyUhPc/oogGATSPcAAZyc3GWZ0e0l4/u6CF+nq6y9cQZGfbOb7Jsd6LRRQMAm0W4AazA0A4N5ceHBkqXyEDJyCuSSfO2ydP/2SW5hcVGFw0AbA7hBrASUcE+snBiP5l8ZQs9mmrBlji57t31LL4JABeJcANYWTPVE0Pbyvx7+kpDf085lpojoz/8XT5Zd0xKS01GFw8AbALhBrBC/VoEy09TBsnQDuFSVGKSl5btl/FzN0tiBp2NAeCvEG4AK9XAx11m395DXh7dSTzdnOW3w6ky9K11eukGk4laHAC4EMINYMWcnJxkTJ+m8uNDg6RLkwDJzC/WSzc88NU2OZ1dYHTxAMAqEW4AG9AyzFf+80B/eezq1uLq7CTL9ybJNW+tY2ZjAKgC4QawEa4uzvLQ4Fay5MEB0ibcT07nFOqZjad+u0MPHwcAlCHcADamQ0SA/PDQAJl4eQtxdhL5flu87ouzcl+y0UUDAKtAuAFskIerizw9rK18N7GfNA/xkaTMfLn3y60yef42OZVFXxwAjo1wA9iwHlFBesi4qsVRK44v3ZUoQ95cK99ujWNEFQCHRbgBbJynW1ktzpLJA6RjY3/d/+bJhbvk9s82SezpXKOLBwD1jnAD2ImOjQNk8aQBMm1YW/FwdZbfj5yWa95eK7PWHJXC4lKjiwcA9YZwA9jZiKr7L28hKx65TPpFB0t+Uan8a/kBGf7ub/LH0VSjiwcA9YJwA9ihZiE+Mv/ePvL637pIsI+7HEnJljGfbJKHv94uKZn5RhcPAOoU4Qaw49mNb+7RRH597Aq5o2+UXmn8h50JctUba+Wz9TFSXEJTFQD75GRysCEVmZmZEhAQIBkZGeLv7290cYB6s/tkhjy3ZI/sjEvX99s29JN/juoovZoFGV00ALDo97dV1Nx88MEH0qxZM/H09JQ+ffrI5s2bqz3/7bffljZt2oiXl5dERkbKo48+Kvn5VLUD1enUJEAWPdBfL8QZ6O0mB5Ky5G+zN+i5ceLSGFUFwH4YHm6++eYbmTp1qsyYMUO2bdsmXbp0kaFDh0pKSkqV58+fP1+efvppff7+/fvls88+06/xzDPP1HvZAVvj7Fy2EKdqqvq/3k31DMdqbpzBb67VHY+z8lnGAYDtM7xZStXU9OrVS95//319v7S0VNfGPPTQQzrEnOvBBx/UoWbVqlXmY4899phs2rRJ1q9f/5c/j2Yp4H/2J2bKi0v36WHjSoivhzx+TWv5W89IPSkgAFgLm2mWKiwslD///FOGDBnyvwI5O+v7GzZsqPI5/fv3188pb7o6duyYLFu2TIYPH15v5QbsRbtG/vLV3X3kk3E99TIOqdkF8vT3u+W699bLH0cYOg7ANrka+cNTU1OlpKREwsPDKx1X9w8cOFDlc8aMGaOfN3DgQD29fHFxsUycOPGCzVIFBQV6q5j8AFQeVXV1+3C5vHWo/HvjCXnnl0O6RmfMp5vkstah8uTQNnqCQACwFYb3ublYa9askZdfflk+/PBD3Ufn+++/l6VLl8o///nPKs+fOXOmrsYq31STF4Dzubs6y90Dm8vaJ66UO/s3EzcXJ1l36JSuxXno6+1yPDXH6CICgPX3uVHNUt7e3rJw4UIZNWqU+fj48eMlPT1dlixZct5zBg0aJH379pXXXnvNfOyrr76S++67T7Kzs3Wz1l/V3KiAQ58boHpqXao3Vh6UJTsS9H1XZyfdCfmhwS0lzM/T6OIBcDCZttLnxt3dXXr06FGpc7DqUKzu9+vXr8rn5ObmnhdgXFxc9G1VOc3Dw0NfhIobgL/WNNhb3rmtmyx9eKBc0SZUiktNutnq8lfXyOsrDkpGLiOrAFgnw5ul1DDwTz75RL744gs9CuqBBx6QnJwcmTBhgn583LhxMm3aNPP5I0eOlFmzZsmCBQskJiZGVq5cKc8//7w+Xh5yAFhOh4gA+XxCb1lwX1/p1jRQ8opK5P3VR2Tgq7/KWysP6VXIAcCaGNqhWLn11lvl1KlTMn36dElKSpKuXbvK8uXLzZ2MY2NjK9XUPPfcc7oDpLqNj4+X0NBQHWxeeuklA98FYP/6RgfL9w/0l5/3JcubPx+Sg8lZ8s6qwzLn9xjdV2fCgOYS4OVmdDEBwPh5buob89wAl6601CTL9ybJO78c1iFH8fd0lbsHRsuEgc3E35OQA8C472/CDYBLCjk/7UmSd1YdkkPJ2eaQc8+gaBnfvxk1OQAshnBTDcINUDchZ+nuRN1MdSSlLOT4erjK2L5NdZMVo6sAXCrCTTUIN0DdKTkbct7/9bC5JkfNn3NzjyZy/2XREhXsY3QRAdgowk01CDdA/dTk/HogRT5cc0S2xabrY2qpqhGdI2Ti5dF6BBYAXAzCTTUIN0D9UR8vm2PSZNbao7Lm4CnzcTVvzn2DoqVfi2A9+hEA/grhphqEG8AYexMyZPbaY7J0V4KUnv3UadvQT+4a2Fyu7xIhnm7MUwXgwgg31SDcAMY6cTpHPv0tRhb+eVJPCKiE+LrL2D5RcnvfKAn18zC6iACsEOGmGoQbwDqo5Ru+3hIrX/xxXBIz8vUxdxdnub5rhNw1oLm0j+D3E8D/EG6qQbgBrEtRSaks35Mkn62PkR1xZZ2Plb7RQTKuXzO5un24uLkYvlIMAIMRbqpBuAGs17bYMzJnfYyeGFANK1fC/Dzktt5N5f96R0qjAC+jiwjAIISbahBuAOsXn54nX2+KlQVb4iQ1u0Afc3F2ksFtw+SOflEyoEWIOKux5QAcRibh5sIIN4DtKCwulRV7k+SrjSdkU0ya+XizYG/d+VhNDhjo7W5oGQHUD8JNNQg3gG06lJwl8zaekO+3xUtWQbF59uNrOzSUW3pGSv8WwdTmAHYsk3BzYYQbwLblFBTLDzsTdG3O3oRM8/HGgV7yt55NdG1OkwbehpYRgOURbqpBuAHsg/ro2hOfKd9ujZPFO+IlK7+sNkdNeKz65KigM7RDQyYHBOwE4aYahBvA/uQXlei+OSro/H7ktPm4v6erjOwSITd2byzdmzZgqQfAhhFuqkG4AexbXFqufPfnSVm4NU4Szk4OqEQGecmoro1lVLfG0iLU19AyArh4hJtqEG4Ax6Dmydlw9LQs2h4vy/ckSk5h2VIPSucmATroqFodlnsAbAPhphqEG8Dx5BWWyMr9ybJ4e7ysPXTKPEGgmjtnYMsQuaFrhAxpHy7+nm5GFxXABRBuqkG4ARybmhRw6a5EXaNTcbkHta7VoFYhMqJzI4IOYIUIN9Ug3AAoF5Oao2tzlu5OlCMp2ebjBB3A+hBuqkG4AXChSQJVjc6Fgs7wTmVBJ8CLoAMYgXBTDcINgNoGHVdnJ+kTHSRXtwvXQYfJAoH6Q7ipBuEGQG2CzrLdiXK4QtBR2jXyl6vbh8s17cOlQ4Q/8+gAdYhwUw3CDYDaOp6aIyv3Jett64k0OTvoSosI8NS1OSrs9GkerNe9AmA5hJtqEG4AWEJaTqH8eiBFVu5LknWHUiWv6H/z6Hi7u0j/FiFyRZtQvdF8BVw6wk01CDcA6mL5h9+PpOoanV/2p+jh5hW1CPWRK9qE6aDTq1kQ610BtUC4qQbhBkBdKi01yb7ETD1Z4JqDKbItNt08aaDi5eYi/VoE66BzWatQiQr2pq8OUAOEm2oQbgDUp4y8Ill/OFXWHkqRNQdPSUpW5VqdxoFeMqBlsAxoGaJDT5ifp2FlBawZ4aYahBsARlEft/sTs2TN2aCzPfaMFJVU/ghuHe6r++uosKOGnTOBIFCGcFMNwg0Aa5FbWCybY9Lkj6OndZ8d1ZxV8RNZrX3VqXGArtlRI7C6RzUQXw9XI4sMGIZwUw3CDQBrdSanUDYcKws6KvCo5SEqUmGnY4S/7pTcu3mQvm3g425YeYH6RLipBuEGgK2IT8+TP46kyoajp2Xz8TQ5eSbvvHNUM1Z50FG1Ow0D6LMD+0S4qQbhBoCtSkjPky3H02RTTJpuzqq4NES5yCAvHXS6N22gtzYN/XSND2DrCDfVINwAsBenswtky/EzOuio0LM3IaPSrMmKj7uLdIkMLAs7UYHSLbIBTVmwSYSbahBuANirrPwi+fPEGb1tiz0jO2LTJafwfzMnl4sO8ZFuZ8OOCj2tw6ndgfUj3FSDcAPAUajJAw+nZMm2E+k67Kjt2KnKnZTLJxbs2NhfOjUOlM5NAqRTkwBpHuwjzgQeWBHCTTUINwAcWXpuoWyPTddz7KjZk3fEpUt2QfF556kh5yrwdG4SqIejq9DTNIjZlGEcwk01CDcAULl2JyY1W3adzNDb7vgM3Xcnv6j0vHMDvNx00OnYOEDaR/hL+0Z+0jzElyYt1AvCTTUINwBQveKSUjlyqizw7FahJz5D9idkSmHJ+YHHw9VZ2jb0k3aN/HXgUbfqvh8zK8PCCDfVINwAwMUrLC6VQ8lZOvComp39iZlyIClLcqvosKyoJqz2jfzNoUcFHrWOFv14UFuEm2oQbgDAciugn0jLlX0JmTrsqOUj1G1iRn6V56uOy63CfaVVmJ+efFCN0mrd0E8iAjzpy4O/RLipBuEGAOp+GYnysFMWeLLkaEp2lc1a5Z2XW4b5mgNPq3A/aRPuJ+H+HoQemBFuqkG4AQBj+vGoWp7DyVlyMClbDqVk6X01NL343JkHz/LzcJXoMF9pEeIj0aE+0iLUV6JDfSUq2Fs83Vzq/T3AWISbahBuAMC6+vIcP52j+/McSs7WgUftHz+dq0dyVUV122nSwFsHnugQX3PwaRHqI6F+1PbYK8JNNQg3AGD9CopL5Hhqrhw7lS1HT2XrGp6jqTn6flb++fPyVKztaX427DQP8dG1PFHBPhIV5C2B3m4EHxtGuKkG4QYAbJf6ykrNLjQHHhV2jqXm6Ptxabnnra1VkZ+nqzQL9pGmwd7STIWeoPJ9Hwnz82Akl5Uj3FSDcAMA9lvbE3s6V46qWp5T2XLidI5u3lLHkjKrHsFVcb4eNXxd1/Lo2h5vfT8yyFsPYaePj219f7uKFfjggw/ktddek6SkJOnSpYu899570rt37wuen56eLs8++6x8//33kpaWJlFRUfL222/L8OHD67XcAADr4eGqhpqXjbY6V35RicSm5cqJ02rL0beqr486dvJMnhQUl8rhlGy9VSXE10OaNPA6u3nr28YNvCRS3QZ6i5c74ceaGB5uvvnmG5k6darMnj1b+vTpo0PK0KFD5eDBgxIWFnbe+YWFhXL11VfrxxYuXCiNGzeWEydOSGBgoCHlBwBYP1XzoufVqSL4FJWUSkJ63jnBJ1c3c508k6tXVk/NLtCbWourKiG+7tJYhZ5Ar0ohKCLQSxoFeoo/MzbXK8ObpVSg6dWrl7z//vv6fmlpqURGRspDDz0kTz/99HnnqxCkankOHDggbm4X/z8LzVIAgJpSX5EZeUW6dkcFnbLbyvtVLTxa1Vw+DQM8pZF58yq7VeHn7DGWrLCTPjeqFsbb21vXwIwaNcp8fPz48brpacmSJec9RzU9BQUF6eepx0NDQ2XMmDHy1FNPiYvL+dWCBQUFeqt4cVR4ItwAAC6V+grNzCuWuLNhJz79f8FH1fyo2ZpVOKoJFYBUyFEhKCLAq+w2sCwIhft76k7PjjziK9NW+tykpqZKSUmJhIeHVzqu7quamaocO3ZMfv31Vxk7dqwsW7ZMjhw5IpMmTZKioiKZMWPGeefPnDlTXnjhhTp7DwAAx6WCRoC3mwR4l62WXpXcwmIdcpIy8nXzl77V9/P08fIApGqAquv3o7i7OOu5fNTszWF+nmW3Z4OPulX3w/08HToEWUWfm4ulmq1Uf5uPP/5Y19T06NFD4uPjdVNVVeFm2rRpuk/PuTU3AADUB29317OTDPpe8JycgmI9oisxXYWd/4UevZ+eLylZ+XImt0gvYaFqh9RWHfezISjsbNjRt/6eZ4NRWRhS+w283cXFDofAGxpuQkJCdEBJTk6udFzdb9iwYZXPadSoke5rU7EJql27dnqklWrmcnd3r3S+h4eH3gAAsFY+Hn8dgNRQ91NZBZKitsx8Sc5U++W3ZcfUbVpOYY1DkMo1QT7uejSY2oJ9K++HVthXmxqRZgsMDTcqiKial1WrVpn73KiaGXX/wQcfrPI5AwYMkPnz5+vznJ2d9bFDhw7p0HNusAEAwF6oYFE2DN37L5e0OJVdIMkq7JwNQOpW3U+uEILO5BbqSQ/VpIhqE8n6yzL4e7qaw0+In7sE+1Tcd5cgHw8dltR+Ax93x22WUk1GqgNxz5499dw2aih4Tk6OTJgwQT8+btw4Pdxb9Z1RHnjgAT2yasqUKXpE1eHDh+Xll1+Whx9+2OB3AgCA8dxdnfXEg2r7q8VMVS1PWbgpG+p++uz+qQr75cfVAqeZ+cV6U7NCV0fNBr3770PFYcPNrbfeKqdOnZLp06frpqWuXbvK8uXLzZ2MY2NjzTU0iuovs2LFCnn00Uelc+fOOviooKNGSwEAgJpxdXEu64zs71njIfFlYacs9FQMP6eyCiUtp6xJ7HROoa7Nceh5buob89wAAFC3VK2QCk9GfX9b9icDAACH52rhYHOxCDcAAMCuEG4AAIBdIdwAAAC7QrgBAAB2hXADAADsCuEGAADYFcINAACwK4QbAABgVwg3AADArhBuAACAXSHcAAAAu0K4AQAAdoVwAwAA7IqrOBiTyWReOh0AANiG8u/t8u/x6jhcuMnKytK3kZGRRhcFAADU4ns8ICCg2nOcTDWJQHaktLRUEhISxM/PT5ycnCyeKlVoiouLE39/f4u+Nv6H61w/uM71h2tdP7jOtn2dVVxRwSYiIkKcnavvVeNwNTfqgjRp0qROf4b6x+QXp+5xnesH17n+cK3rB9fZdq/zX9XYlKNDMQAAsCuEGwAAYFcINxbk4eEhM2bM0LeoO1zn+sF1rj9c6/rBdXac6+xwHYoBAIB9o+YGAADYFcINAACwK4QbAABgVwg3AADArhBuLOSDDz6QZs2aiaenp/Tp00c2b95sdJFsysyZM6VXr1565uiwsDAZNWqUHDx4sNI5+fn5MnnyZAkODhZfX1+56aabJDk5udI5sbGxMmLECPH29tav88QTT0hxcXE9vxvb8corr+iZuh955BHzMa6z5cTHx8vtt9+ur6WXl5d06tRJtm7dan5cjeeYPn26NGrUSD8+ZMgQOXz4cKXXSEtLk7Fjx+rJ0AIDA+Xuu++W7OxsA96NdSopKZHnn39emjdvrq9hixYt5J///Gel9Ye4zhdv3bp1MnLkSD0bsPqMWLx4caXHLXVNd+3aJYMGDdLfnWpW41dffVUsQo2WwqVZsGCByd3d3TRnzhzT3r17Tffee68pMDDQlJycbHTRbMbQoUNNc+fONe3Zs8e0Y8cO0/Dhw01NmzY1ZWdnm8+ZOHGiKTIy0rRq1SrT1q1bTX379jX179/f/HhxcbGpY8eOpiFDhpi2b99uWrZsmSkkJMQ0bdo0g96Vddu8ebOpWbNmps6dO5umTJliPs51toy0tDRTVFSU6c477zRt2rTJdOzYMdOKFStMR44cMZ/zyiuvmAICAkyLFy827dy503T99debmjdvbsrLyzOfc+2115q6dOli2rhxo+m3334ztWzZ0vR///d/Br0r6/PSSy+ZgoODTT/++KMpJibG9N1335l8fX1N77zzjvkcrvPFU7/Xzz77rOn7779XKdG0aNGiSo9b4ppmZGSYwsPDTWPHjtWf/V9//bXJy8vL9NFHH5kuFeHGAnr37m2aPHmy+X5JSYkpIiLCNHPmTEPLZctSUlL0L9TatWv1/fT0dJObm5v+4Cq3f/9+fc6GDRvMv4zOzs6mpKQk8zmzZs0y+fv7mwoKCgx4F9YrKyvL1KpVK9PKlStNl19+uTnccJ0t56mnnjINHDjwgo+XlpaaGjZsaHrttdfMx9T19/Dw0B/yyr59+/S137Jli/mcn376yeTk5GSKj4+v43dgG0aMGGG66667Kh278cYb9RemwnW+dOeGG0td0w8//NDUoEGDSp8b6vemTZs2l1xmmqUuUWFhofz555+6Sq7i+lXq/oYNGwwtmy3LyMjQt0FBQfpWXeOioqJK17lt27bStGlT83VWt6raPzw83HzO0KFD9SJue/furff3YM1Us5NqVqp4PRWus+X88MMP0rNnT/nb3/6mm+66desmn3zyifnxmJgYSUpKqnSt1bo5qlm74rVW1fnqdcqp89VnzKZNm+r5HVmn/v37y6pVq+TQoUP6/s6dO2X9+vUybNgwfZ/rbHmWuqbqnMsuu0zc3d0rfZaoLglnzpy5pDI63MKZlpaamqrbfCt+0Cvq/oEDBwwrl62v3K76gAwYMEA6duyoj6lfJPULoH5Zzr3O6rHyc6r6dyh/DGUWLFgg27Ztky1btpz3GNfZco4dOyazZs2SqVOnyjPPPKOv98MPP6yv7/jx483XqqprWfFaq2BUkaurqw79XOsyTz/9tA7WKoS7uLjoz+OXXnpJ9/VQuM6WZ6lrqm5VX6lzX6P8sQYNGtS6jIQbWGWtwp49e/RfX7CsuLg4mTJliqxcuVJ34EPdhnT1V+vLL7+s76uaG/X/9ezZs3W4gWV8++23Mm/ePJk/f7506NBBduzYof84Uh1huc6Oi2apSxQSEqL/Wjh3NIm637BhQ8PKZasefPBB+fHHH2X16tXSpEkT83F1LVUTYHp6+gWvs7qt6t+h/DGUNTulpKRI9+7d9V9Ralu7dq28++67el/91cR1tgw1iqR9+/aVjrVr106PNKt4rar77FC36t+rIjUqTY1C4VqXUSP1VO3NbbfdpptL77jjDnn00Uf1CEyF62x5lrqmdflZQri5RKqKuUePHrrNt+JfbOp+v379DC2bLVF91lSwWbRokfz666/nVVWqa+zm5lbpOqt2WfVFUX6d1e3u3bsr/UKpGgo1DPHcLxlHNXjwYH2N1F+35ZuqXVBV+OX7XGfLUM2q505noPqFREVF6X31/7j6AK94rVXziuqPUPFaq6CpQmk59fuhPmNU/waI5Obm6n4cFak/ONU1UrjOlmepa6rOUUPOVT+/ip8lbdq0uaQmKe2SuyRDDwVXvcQ///xz3UP8vvvu00PBK44mQfUeeOABPaxwzZo1psTERPOWm5tbaYiyGh7+66+/6iHK/fr109u5Q5SvueYaPZx8+fLlptDQUIYo/4WKo6UUrrPlhtq7urrqocqHDx82zZs3z+Tt7W366quvKg2nVZ8VS5YsMe3atct0ww03VDmctlu3bno4+fr16/UoN0ceonyu8ePHmxo3bmweCq6GLqupCZ588knzOVzn2o2oVFM9qE1FhTfffFPvnzhxwmLXVI2wUkPB77jjDj0UXH2Xqt8RhoJbkffee09/Iaj5btTQcDWuHzWnfnmq2tTcN+XUL82kSZP00EH1CzB69GgdgCo6fvy4adiwYXquBPUB99hjj5mKiooMeEe2G264zpbz3//+VwdB9cdP27ZtTR9//HGlx9WQ2ueff15/wKtzBg8ebDp48GClc06fPq2/ENTcLWq4/YQJE/QXD8pkZmbq/3/V56+np6cpOjpaz89ScXgx1/nirV69usrPZBUmLXlN1Rw5asoE9RoqpKrQZAlO6j+XVvcDAABgPehzAwAA7ArhBgAA2BXCDQAAsCuEGwAAYFcINwAAwK4QbgAAgF0h3AAAALtCuAEAEXFycpLFixcbXQwAFkC4AWC4O++8U4eLc7drr73W6KIBsEGuRhcAABQVZObOnVvpmIeHh2HlAWC7qLkBYBVUkFErDVfcylcGVrU4s2bNkmHDhomXl5dER0fLwoULKz1frVR+1VVX6ceDg4Plvvvuk+zs7ErnzJkzRzp06KB/VqNGjfRK9BWlpqbK6NGjxdvbW1q1aiU//PBDPbxzAJZGuAFgE55//nm56aabZOfOnTJ27Fi57bbbZP/+/fqxnJwcGTp0qA5DW7Zske+++05++eWXSuFFhaPJkyfr0KOCkAouLVu2rPQzXnjhBbnllltk165dMnz4cP1z0tLS6v29ArhEFll+EwAugVpp2MXFxeTj41Npe+mll/Tj6qNq4sSJlZ7Tp08f0wMPPKD31WrbahXz7Oxs8+NLly41OTs7m5KSkvT9iIgIvVr0haif8dxzz5nvq9dSx3766SeLv18AdYs+NwCswpVXXqlrVyoKCgoy7/fr16/SY+r+jh079L6qwenSpYv4+PiYHx8wYICUlpbKwYMHdbNWQkKCDB48uNoydO7c2byvXsvf319SUlIu+b0BqF+EGwBWQYWJc5uJLEX1w6kJNze3SvdVKFIBCYBtoc8NAJuwcePG8+63a9dO76tb1RdH9b0p9/vvv4uzs7O0adNG/Pz8pFmzZrJq1ap6LzeA+kfNDQCrUFBQIElJSZWOubq6SkhIiN5XnYR79uwpAwcOlHnz5snmzZvls88+04+pjr8zZsyQ8ePHy9///nc5deqUPPTQQ3LHHXdIeHi4PkcdnzhxooSFhelRV1lZWToAqfMA2BfCDQCrsHz5cj08uyJV63LgwAHzSKYFCxbIpEmT9Hlff/21tG/fXj+mhm6vWLFCpkyZIr169dL31ciqN9980/xaKvjk5+fLW2+9JY8//rgOTTfffHM9v0sA9cFJ9Squl58EALWk+r4sWrRIRo0aZXRRANgA+twAAAC7QrgBAAB2hT43AKwerecALgY1NwAAwK4QbgAAgF0h3AAAALtCuAEAAHaFcAMAAOwK4QYAANgVwg0AALArhBsAAGBXCDcAAEDsyf8DtH9W8WCeUHYAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import confusion_matrix, accuracy_score, ConfusionMatrixDisplay\n",
    "\n",
    "df = pd.read_csv('winequality-red.csv')\n",
    "\n",
    "df['quality'] = np.where(df['quality'] >= 6, 1, 0)\n",
    "\n",
    "X = df.drop('quality', axis=1)\n",
    "y = df['quality']\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
    "\n",
    "scaler = StandardScaler()\n",
    "X_train = scaler.fit_transform(X_train)\n",
    "X_test = scaler.transform(X_test)\n",
    "\n",
    "y_train = y_train.values\n",
    "y_test = y_test.values\n",
    "\n",
    "class NeuralNetwork:\n",
    "    def __init__(self, input_size, hidden_size, output_size, learning_rate=0.01):\n",
    "        self.input_size = input_size\n",
    "        self.hidden_size = hidden_size\n",
    "        self.output_size = output_size\n",
    "        self.learning_rate = learning_rate\n",
    "        \n",
    "        self.W1 = np.random.randn(self.input_size, self.hidden_size)\n",
    "        self.b1 = np.zeros((1, self.hidden_size))\n",
    "        self.W2 = np.random.randn(self.hidden_size, self.output_size)\n",
    "        self.b2 = np.zeros((1, self.output_size))\n",
    "    \n",
    "    def sigmoid(self, x):\n",
    "        return 1 / (1 + np.exp(-x))\n",
    "    \n",
    "    def sigmoid_derivative(self, x):\n",
    "        return x * (1 - x)\n",
    "    \n",
    "    def relu(self, x):\n",
    "        return np.maximum(0, x)\n",
    "    \n",
    "    def relu_derivative(self, x):\n",
    "        return np.where(x > 0, 1, 0)\n",
    "    \n",
    "    def forward_propagation(self, X):\n",
    "        self.Z1 = np.dot(X, self.W1) + self.b1\n",
    "        self.A1 = self.relu(self.Z1)\n",
    "        self.Z2 = np.dot(self.A1, self.W2) + self.b2\n",
    "        self.A2 = self.sigmoid(self.Z2)\n",
    "    \n",
    "    def backward_propagation(self, X, y):\n",
    "        m = X.shape[0]\n",
    "        \n",
    "        self.dZ2 = self.A2 - y.reshape(-1, 1)\n",
    "        self.dW2 = np.dot(self.A1.T, self.dZ2) / m\n",
    "        self.db2 = np.sum(self.dZ2, axis=0, keepdims=True) / m\n",
    "        \n",
    "        self.dA1 = np.dot(self.dZ2, self.W2.T)\n",
    "        self.dZ1 = self.dA1 * self.relu_derivative(self.Z1)\n",
    "        self.dW1 = np.dot(X.T, self.dZ1) / m\n",
    "        self.db1 = np.sum(self.dZ1, axis=0, keepdims=True) / m\n",
    "        \n",
    "        self.W1 -= self.learning_rate * self.dW1\n",
    "        self.b1 -= self.learning_rate * self.db1\n",
    "        self.W2 -= self.learning_rate * self.dW2\n",
    "        self.b2 -= self.learning_rate * self.db2\n",
    "    \n",
    "    def train(self, X, y, epochs=1000):\n",
    "        self.losses = []\n",
    "        for epoch in range(epochs):\n",
    "            self.forward_propagation(X)\n",
    "            self.backward_propagation(X, y)\n",
    "            \n",
    "            loss = -np.mean(y.reshape(-1, 1) * np.log(self.A2 + 1e-8) + \n",
    "                            (1 - y.reshape(-1, 1)) * np.log(1 - self.A2 + 1e-8))\n",
    "            self.losses.append(loss)\n",
    "            if epoch % 100 == 0:\n",
    "                print(f\"Epoch {epoch}, Loss: {loss}\")\n",
    "\n",
    "    def predict(self, X):\n",
    "        self.forward_propagation(X)\n",
    "        return (self.A2 > 0.5).astype(int)\n",
    "\n",
    "input_size = X_train.shape[1]\n",
    "hidden_size = 10\n",
    "output_size = 1\n",
    "learning_rate = 0.01\n",
    "\n",
    "nn = NeuralNetwork(input_size, hidden_size, output_size, learning_rate)\n",
    "\n",
    "nn.train(X_train, y_train, epochs=1000)\n",
    "\n",
    "y_pred = nn.predict(X_test)\n",
    "accuracy = accuracy_score(y_test, y_pred)\n",
    "print(f\"Test Doğruluğu: {accuracy:.4f}\")\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred)\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm)\n",
    "disp.plot()\n",
    "plt.show()\n",
    "\n",
    "plt.plot(nn.losses)\n",
    "plt.title(\"Loss - Epoch Eğrisi\")\n",
    "plt.xlabel(\"Epoch\")\n",
    "plt.ylabel(\"Loss\")\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "570e0983-230a-43ab-887f-62b44f3f61bd",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
